server:
  port: 8082  # order-service? 8082?? ???

spring:
  application:
    name: order-service
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql-order:3306/orderdb
    username: root
    password: ssafy
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true          # SQL ??
        format_sql: true        # SQL ???
        use_sql_comments: true  # SQL? ?? ??
        default_batch_fetch_size: 1000  # ?? ???
        dialect: org.hibernate.dialect.MySQL8Dialect  # MySQL? ?? ?? ??
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
  kafka:
    bootstrap-servers:
      - kafka-broker-1:9092
      - kafka-broker-2:9094
      - kafka-broker-3:9096
    consumer:
      group-id: order-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      concurrency: 3  # 동시에 여러 스레드에서 메시지를 처리할 수 있도록 설정

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka-server-app:8761/eureka/
  instance:
    prefer-ip-address: true
    instance-id: order-service-${spring.application.instance_id:${random.value}}

